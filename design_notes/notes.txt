What is the goal of this game?

To explore the tarot using a roguelike interface.

Therefore, the set of 78 tarot cards is essential to every aspect of this gameplay.  Whenever something must be randomized, some property of this set of cards will be used to determine an effect.

Attack a monster?  Draw a card!
New room?  Draw a card!
Each character stat?  Also a card!  Or, maybe determined by a card.

Therefore, each card, being an essential component of this game, will be a proper object, and managed in a config file.


What can a tarot deck do?
-------------------------

- shuffle
- cut
- draw
- bottom card
- random card from middle

TODO implement shuffle, cut, draw, random card features
TODO brainstorm ideas for mechanics that use tarot cards
TODO no rush!

Maps
----
Maps are an array of Tiles.
Tiles have a sprite, and can contain events.
Events define game functionality.
- The player is an event
- items, walls, stairs, anything with interactability.

They can be stable or mobile.
- Events can modify the player's location, stats, etc.


Hmm, general question:
- should tiles have events, or should events have tiles?
- tiles could each contain an event reference, and events are updated via iterating through all tiles in a map.
- or, tiles could be maintained in their own list, and then a lookup occurs when drawing the map
- a map has terrain and features - paths, walls, woods, rock, etc.
- where should such terrain attributes be stored?

Making everything an event would be interesting.
- Have a generic MapEvent, which is basically a position, a sprite, a mapName, and a description message if inspected.
- Then have TerrainEvent, which is always the lowest event.  These could also be/replace Tiles.
- TerrainEvents will contain a pointer an ActiveEvent or a PassiveEvent.
- ActiveEvents are entities that can move or change the state of the map.  Examples:
  - Player
  - NPCs
  - Monsters
- PassiveEvents are entities that lay passively on the terrain and do nothing until interacted with.  Examples:
  - Items
  - Treasure Chests
  - Stairs
  - Traps

Basically, RpgMaker's approach, but rewritten in Java to suit my needs and desires.

Menus
-----
TODO: Read about menu design, implement as necessary.

Battle Systems:
---------------
Turn based combat would be easiest.
  Make it initiative based, one action per turn. (For now: consider more complicated round robin systems later.)
- Make attack and defense predictable: attack is how much damage you do x2, defense is how much damage reduction you have.  So equal attack/damage stats means you can predict exactly how much damage you do on average: the attack stat.
- Possibly, make base to hit is based on weapon skill: proficiency with a given weapon or weapon type.
- Make accuracy and dodge be relative: against some base, make chance to hit scaled based on difference between the accuracy and dodge stat.
- Critical hits ALWAYS hit.  This makes them fun.  Their damage multiplier is based on weapon/player skills/class/etc.
- Use HP/MP system for simplicity at first.

Random encounters can have 1-10 mobs, and player parties can have 1-4 members. Or so
A battle entity has a number of choices, based on what their options are:
- Attack
- Defend (choose target)
- Run
- Item
- Skill
- Spell
- Special

Not all entities have all options available.
Some entities can perform multiple of the same action.
Fighter classes may begin to acquire multiple Attack commands, for example.

What is P0 for this game?
-------------------------
Have player
Have maps
Have stairs on map
Have series of map
Have objective
com.aaroncarsonart.tarotrl.map.GameMapUtils has obstacles
Player can navigate the obstacles
Player can use stairs to enter another map
Player wins when they touch the objective

I've programmed basically all of this before ... time to do it again, in a most smartly way. :-P